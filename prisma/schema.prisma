// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AUTHOR
  VIEWER
}

enum Status {
  DRAFT
  PUBLISH
  ARCHIVE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(AUTHOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles   Article[]
  activities Activity[]
  media      Media[]
}

model CategoryArticle {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  articles  Article[]
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @default(DRAFT)
  highlight   Boolean   @default(false)

  categoryId  Int
  category    CategoryArticle @relation(fields: [categoryId], references: [id])

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])

  thumbnailId Int?      @unique
  thumbnail   Media?    @relation("ArticleThumbnail", fields: [thumbnailId], references: [id])
}

model Activity {
  id        Int      @id @default(autoincrement())
  title     String
  desc      String
  longDesc  String   @db.Text
  date      String
  showTitle   Boolean  @default(false)
  instaUrl  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(DRAFT)

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  medias    ActivityMedia[]
}

model Media {
  id           Int      @id @default(autoincrement())
  url          String
  type         String
  title        String?
  alt          String?
  size         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploadedById Int?
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])

  articleThumbnail Article? @relation("ArticleThumbnail")
  activities ActivityMedia[]
}

model ActivityMedia {
  activityId Int
  mediaId    Int

  activity Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  media    Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@id([activityId, mediaId])
}

// ============================================
// PACKAGE SYSTEM - SIMPLIFIED & BEST PRACTICE
// ============================================

model Package {
  id             Int                  @id @default(autoincrement())
  type           String
  highlight      Boolean              @default(false)
  price          Int
  priceOriginal  Int
  link           String
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt

  features       PackageFeature[]
  requirements   PackageRequirement[]
}

model Feature {
  id        Int               @id @default(autoincrement())
  name      String            @unique
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  packages  PackageFeature[]
}

model Requirement {
  id        Int                   @id @default(autoincrement())
  name      String                @unique
  createdAt DateTime              @default(now())
  updatedAt DateTime              @updatedAt

  packages  PackageRequirement[]
}

// Pivot table untuk Package <-> Feature (many-to-many)
model PackageFeature {
  packageId   Int
  featureId   Int
  status      Boolean  @default(true)  // true/false untuk centang/silang

  package     Package  @relation(fields: [packageId], references: [id], onDelete: Cascade)
  feature     Feature  @relation(fields: [featureId], references: [id], onDelete: Cascade)

  @@id([packageId, featureId])
}

// Pivot table untuk Package <-> Requirement (many-to-many)
model PackageRequirement {
  packageId      Int
  requirementId  Int

  package        Package     @relation(fields: [packageId], references: [id], onDelete: Cascade)
  requirement    Requirement @relation(fields: [requirementId], references: [id], onDelete: Cascade)

  @@id([packageId, requirementId])
}