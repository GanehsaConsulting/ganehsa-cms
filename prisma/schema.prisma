datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AUTHOR
  VIEWER
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(AUTHOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles   Article[]
  activities Activity[]
  media      Media[]
}

model CategoryArticle {
  id           Int        @id @default(autoincrement())
  name         String     @unique
  slug         String     @unique
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  articles     Article[]
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  categoryId  Int
  category    CategoryArticle @relation(fields: [categoryId], references: [id])

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])

  // One-to-one thumbnail
  thumbnailId Int?      @unique
  thumbnail   Media?    @relation("ArticleThumbnail", fields: [thumbnailId], references: [id])

  // One-to-many additional medias
  medias      Media[]   @relation("ArticleMedias")
}

model Activity {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  // Media attached to activity
  medias    Media[]  @relation("ActivityMedias")
}

model Media {
  id           Int      @id @default(autoincrement())
  url          String
  type         String
  title        String?
  alt          String?
  size         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())

  uploadedById Int?
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])

  // One-to-many relation with Article
  articleId    Int?
  article      Article? @relation("ArticleMedias", fields: [articleId], references: [id])

  // One-to-one thumbnail relation
  articleThumbnail Article? @relation("ArticleThumbnail")

  // One-to-many relation with Activity
  activityId   Int?
  activity     Activity? @relation("ActivityMedias", fields: [activityId], references: [id])
}
