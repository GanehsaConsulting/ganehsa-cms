datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  SUPER_ADMIN
  ADMIN
  AUTHOR
  VIEWER
}

enum Status {
  DRAFT
  PUBLISH
  ARCHIVE
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String
  role      Role     @default(AUTHOR)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles   Article[]
  activities Activity[]
  media      Media[]
}

model CategoryArticle {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  slug      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  articles  Article[]
}

model Article {
  id          Int       @id @default(autoincrement())
  title       String
  slug        String    @unique
  excerpt     String?
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  status      Status    @default(DRAFT)

  categoryId  Int
  category    CategoryArticle @relation(fields: [categoryId], references: [id])

  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])

  // Thumbnail (satu gambar khusus)
  thumbnailId Int?      @unique
  thumbnail   Media?    @relation("ArticleThumbnail", fields: [thumbnailId], references: [id])

  // Many-to-many ke Media (galeri artikel)
  medias      ArticleMedia[]
}

model Activity {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  status    Status   @default(DRAFT)

  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])

  // Many-to-many ke Media
  medias    ActivityMedia[]
}

model Media {
  id           Int      @id @default(autoincrement())
  url          String
  type         String          // "image", "video", dll.
  title        String?
  alt          String?
  size         Int?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  uploadedById Int?
  uploadedBy   User?    @relation(fields: [uploadedById], references: [id])

  // Thumbnail reverse relation
  articleThumbnail Article? @relation("ArticleThumbnail")

  // Many-to-many backrefs
  articles  ArticleMedia[]
  activities ActivityMedia[]
}

//
// Join tables explicit untuk many-to-many
//
model ArticleMedia {
  articleId Int
  mediaId   Int

  article Article @relation(fields: [articleId], references: [id])
  media   Media   @relation(fields: [mediaId], references: [id])

  @@id([articleId, mediaId])
}

model ActivityMedia {
  activityId Int
  mediaId    Int

  activity Activity @relation(fields: [activityId], references: [id])
  media    Media    @relation(fields: [mediaId], references: [id])

  @@id([activityId, mediaId])
}
